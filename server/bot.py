import configparser
import telebot
from telebot import types
import time
import shutil
import os
import logging
import os
import shutil
import win32com.client

logging.basicConfig(format='%(asctime)s - %(levelname)s - %(message)s',
                    level=logging.INFO)

config = configparser.ConfigParser()  # —Å–æ–∑–¥–∞—ë–º –æ–±—ä–µ–∫—Ç–∞ –ø–∞—Ä—Å–µ—Ä–∞
config.read("config.ini")  # —á–∏—Ç–∞–µ–º –∫–æ–Ω—Ñ–∏–≥

user = 'bot_telegram'

# –ë–µ—Ä–µ–º —Ç–æ–∫–µ–Ω –∏–∑ –∫–æ–Ω—Ñ–∏–≥ —Ñ–∞–∏–ª–∞
bot_token = config.get(user, "bot_token")
bot = telebot.TeleBot(bot_token)
my_id = 845800521


menu_keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True,one_time_keyboard=False)
btnscreen = types.KeyboardButton('–î–æ–±–∞–≤–∏—Ç—å –∫–∞–Ω–∞–ª')
btnmouse = types.KeyboardButton('–°–æ–∑–¥–∞—Ç—å backup')
btnfiles = types.KeyboardButton('–ó–∞–ø—É—Å—Ç–∏—Ç—å —Å–±–æ—Ä')
btnaddit = types.KeyboardButton('–°–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å –±–µ–∫–∞–ø—ã –Ω–∞ —Ñ–ª–µ—à–∫—É')
btnmsgbox = types.KeyboardButton('üì©–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è')
btninfo = types.KeyboardButton('‚ùóÔ∏è–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è')
menu_keyboard.row(btnscreen, btnmouse)
menu_keyboard.row(btnfiles, btnaddit)
#menu_keyboard.row(btninfo, btnmsgbox)

menu_new_channel = types.ReplyKeyboardMarkup(resize_keyboard=True,one_time_keyboard=False)
cencel = types.KeyboardButton('–û—Ç–º–µ–Ω–∞')
menu_new_channel.row(cencel)

bot.send_message(my_id, "‚úÖ–°–µ—Ä–≤–µ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç‚úÖ", reply_markup = menu_keyboard)
logging.info(f'–ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç')

# –ü–æ–ª—É—á–∞–µ–º —Å–æ–æ–±—à–µ–Ω–∏–µ
@bot.message_handler(content_types=["text"])
def get_text_messages(message):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç –∫–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–µ
    if message.from_user.id == my_id:
        bot.send_chat_action(my_id, 'typing')
        if message.text == "–î–æ–±–∞–≤–∏—Ç—å –∫–∞–Ω–∞–ª":
            bot.send_message(my_id, "–í–≤–¥–∏—Ç–µ –∏–Ω–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä –∫–∞–Ω–∞–ª–∞ —á–µ—Ä–µ–∑ @: ", reply_markup = menu_new_channel)
            if message.text == "–û—Ç–º–µ–Ω–∞":
                bot.send_message(my_id, "–ù–∞–∑–∞–¥", reply_markup = menu_keyboard)
            else:
                bot.register_next_step_handler(message, new_chennel)
        elif message.text == "–°–æ–∑–¥–∞—Ç—å backup":
            bot.send_message(my_id, "–ù–µ–º–Ω–æ–≥–æ –ø–æ–¥–æ–∂–¥–∏—Ç–µ")
            new_backup()
        elif message.text == "–ó–∞–ø—É—Å—Ç–∏—Ç—å —Å–±–æ—Ä":
            start_sbor()
        elif message.text == "–°–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å –±–µ–∫–∞–ø—ã –Ω–∞ —Ñ–ª–µ—à–∫—É":
            copy_file()
    else:
        info_user(message)

def new_chennel(message):
    bot.send_chat_action(my_id, 'typing')
    try:
        my_string = message.text
        if "@" in my_string:
            with open('channels.txt', 'a') as chennels:
                chennels.write('\n' + str(message.text))

            bot.send_message(my_id, "–ö–∞–Ω–∞–ª –¥–æ–±–∞–≤–ª–µ–Ω")
            logging.info(f'–ö–∞–Ω–∞–ª –¥–æ–±–∞–≤–ª–µ–Ω')
        else:
            error_r()

    except:
        bot.send_message(my_id, "–û—à–∏–±–∫–∞! –∏–Ω–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä –≤–≤–µ–¥–µ–Ω –Ω–µ–≤–µ—Ä–Ω–æ", reply_markup = menu_keyboard)
        bot.register_next_step_handler(message, new_chennel)

def error_r ():
    bot.send_message(my_id, "ERROR", reply_markup = menu_keyboard)
    logging.error(f'–û—à–∏–±–∫–∞')

def start_sbor():
    try:
        os.startfile(r'' + 'message_forwarding.py')
        logging.info(f'–°–∫—Ä–∏–ø—Ç –∑–∞–ø—É—à–µ–Ω')
    except Exception as e:
        bot.send_message(my_id, "–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞")
        logging.error(f'–û—à–∏–±–∫–∞ {e}')

def new_backup():
    #bot.send_chat_action(my_id, 'typing')
    try:

                                                    # –ü—É—Ç—å –∫ –ø–∞–ø–∫–µ, –∫–æ—Ç–æ—Ä—É—é –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ –±—ç–∫–∞–ø
        source = config.get("backup", "source_files")
                                                    # –°–æ–∑–¥–∞–µ–º –∏–º—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –¥–ª—è –±—ç–∫–∞–ø–∞, –≤–∫–ª—é—á–∞—é—â–µ–µ —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è
        backup_name = 'backup_' + time.strftime('%Y%m%d_%H%M%S')
                                                    # –ü—É—Ç—å –∫ –ø–∞–ø–∫–µ, –≤ –∫–æ—Ç–æ—Ä—É—é –±—É–¥—É—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –±—ç–∫–∞–ø—ã
        target_dir = config.get("backup", "file_copies")
                                                    # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –±—ç–∫–∞–ø–∞
        if not os.path.exists(target_dir):
            os.makedirs(target_dir)
                                                    # –°–æ–∑–¥–∞–µ–º –ø–æ–ª–Ω—ã–π –ø—É—Ç—å –∫ –Ω–æ–≤–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –±—ç–∫–∞–ø–∞
        target = os.path.join(target_dir, backup_name)
                                                    # –°–æ–∑–¥–∞–µ–º –±—ç–∫–∞–ø –ø–∞–ø–∫–∏
        shutil.copytree(source, target)
                                                    # –í—ã–≤–æ–¥–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ç–æ–º, —á—Ç–æ –±—ç–∫–∞–ø —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ
        #print('Backup created at', target)
        logging.info(f'Backp created at {target}')
        bot.send_message(my_id, "Backup —Å–æ–∑–¥–∞–Ω")
    except Exception as e:
        bot.send_message(my_id, "–û—à–∏–±–∫–∞! backup –Ω–µ —Å–æ–∑–¥–∞–Ω")
        logging.error(f'Error while forwarding message: {e}')

def copy_file():

    # –ü—É—Ç—å –∫ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ —Å —Ñ–∞–π–ª–∞–º–∏, –∫–æ—Ç–æ—Ä—ã–µ –Ω—É–∂–Ω–æ —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å –Ω–∞ —Ñ–ª–µ—à–∫—É
    source_folder = r'C:\neuro\backup'

    # –ü—É—Ç—å –∫ —Ñ–ª–µ—à–∫–µ, –∫—É–¥–∞ –Ω—É–∂–Ω–æ —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å —Ñ–∞–π–ª—ã
    # –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞–º–µ–Ω–∏—Ç—å "FLASH_DRIVE_NAME" –Ω–∞ –∏–º—è —Ñ–ª–µ—à–∫–∏, –∫–æ—Ç–æ—Ä–æ–µ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è –≤ —Å–∏—Å—Ç–µ–º–µ
    destination_folder = r'D:\backup'

    # –ü–æ–ª—É—á–µ–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞ WMI –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è USB-—É—Å—Ç—Ä–æ–π—Å—Ç–≤
    wmi = win32com.client.GetObject("winmgmts:")
    usb_devices = wmi.InstancesOf("Win32_USBHub")

    # –û–∂–∏–¥–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è —Ñ–ª–µ—à–∫–∏
    def copy_folders(source, destination):
        shutil.copytree(source, destination)

# –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–æ–±—ã—Ç–∏–π, —Å–≤—è–∑–∞–Ω–Ω—ã—Ö —Å —Ñ–ª–µ—à–∫–æ–π
    while True:
        if os.path.exists("D:\\"):
            copy_folders(source_folder, destination_folder)
            break


def info_user(message):
    bot.send_chat_action(my_id, 'typing')
    alert = f"–ö—Ç–æ-—Ç–æ –ø—ã—Ç–∞–ª—Å—è –∑–∞–¥–∞—Ç—å –∫–æ–º–∞–Ω–¥—É: \"{message.text}\"\n\n"
    alert += f"user id: {str(message.from_user.id)}\n"
    alert += f"first name: {str(message.from_user.first_name)}\n"
    alert += f"last name: {str(message.from_user.last_name)}\n"
    alert += f"username: @{str(message.from_user.username)}"
    bot.send_message(my_id, alert, reply_markup = menu_keyboard)
    bot.send_message(message.from_user.id, "–ü–æ—àe–ª –Ω–∞—Ö—É–π")
    logging.info(f'{alert}')

while True:
    try:
        bot.polling(none_stop=True, interval=0, timeout=20)
    except Exception as E:
        print(E.args)
        time.sleep(2)
